{"mappings":"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","sources":["<anon>","movie.js"],"sourcesContent":["// Constants and Configuration\nconst CONFIG = {\n    API_BASE_URL: \"https://api.tvmaze.com/search/shows\",\n    CAROUSEL_LIMIT: 5,\n    FAVORITES_LIMIT: 4,\n    NOTIFICATION_DURATION: 3000,\n    IMAGE_LAZY_LOADING: true,\n    STORAGE_KEYS: {\n        WATCHLIST: \"reelrate_watchlist\",\n        FAVORITES: \"reelrate_favorites\",\n        REVIEWS: \"reelrate_reviews\",\n        MOVIE_LIST: \"reelrate_movie_list\"\n    },\n    MAX_RATING: 5\n};\n// Utility Functions\nconst debounce = (func, wait)=>{\n    let timeout;\n    return function executedFunction(...args) {\n        const later = ()=>{\n            clearTimeout(timeout);\n            func(...args);\n        };\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n    };\n};\nconst sanitizeString = (str)=>{\n    const div = document.createElement(\"div\");\n    div.textContent = str;\n    return div.innerHTML.replace(/\"/g, \"&quot;\");\n};\nclass MovieListManager {\n    constructor(){\n        this.movieListingsContainer = document.getElementById(\"movieListings\");\n        this.movies = this.loadMovies();\n    }\n    loadMovies() {\n        try {\n            const movies = localStorage.getItem(CONFIG.STORAGE_KEYS.MOVIE_LIST);\n            return movies ? JSON.parse(movies) : [];\n        } catch (error) {\n            console.error(\"Error loading movies:\", error);\n            return [];\n        }\n    }\n    saveMovies() {\n        try {\n            localStorage.setItem(CONFIG.STORAGE_KEYS.MOVIE_LIST, JSON.stringify(this.movies));\n        } catch (error) {\n            console.error(\"Error saving movies:\", error);\n        }\n    }\n    updateMovieList(shows) {\n        if (!shows || !Array.isArray(shows)) return;\n        this.movies = shows.map((show)=>({\n                id: show.show.id,\n                name: show.show.name,\n                image: show.show.image?.original || null,\n                rating: show.show.rating?.average || \"N/A\"\n            }));\n        this.saveMovies();\n        this.display();\n    }\n    display() {\n        if (!this.movieListingsContainer) {\n            console.error(\"Movie listings container not found\");\n            return;\n        }\n        this.movieListingsContainer.innerHTML = \"\";\n        if (!this.movies.length) {\n            this.movieListingsContainer.innerHTML = '<p class=\"text-center text-light\">No results found.</p>';\n            return;\n        }\n        const grid = document.createElement(\"div\");\n        grid.className = \"movie-listings-grid\";\n        this.movies.forEach((movie)=>{\n            const card = this.createMovieCard(movie);\n            grid.appendChild(card);\n        });\n        this.movieListingsContainer.appendChild(grid);\n    }\n    createMovieCard(movie) {\n        const card = document.createElement(\"div\");\n        card.className = \"movie-card\";\n        card.innerHTML = `\n            <div class=\"movie-card-inner\">\n                <img src=\"${movie.image || \"https://via.placeholder.com/300x450?text=No+Image\"}\" \n                     alt=\"${sanitizeString(movie.name)}\" \n                     class=\"movie-image\"\n                     loading=\"lazy\" \n                     onerror=\"this.src='https://via.placeholder.com/300x450?text=No+Image'\">\n                <div class=\"movie-info\">\n                    <h3 class=\"movie-title\">${sanitizeString(movie.name)}</h3>\n                    <p class=\"movie-rating\">Rating: ${movie.rating}</p>\n                    <button class=\"btn btn-info review-btn\" \n                            data-movie-id=\"${movie.id}\"\n                            data-movie-name=\"${sanitizeString(movie.name)}\"\n                            aria-label=\"Review ${sanitizeString(movie.name)}\">\n                        <i class=\"fas fa-star me-2\"></i>Review\n                    </button>\n                </div>\n            </div>\n        `;\n        // Add event listener for review button\n        const reviewBtn = card.querySelector(\".review-btn\");\n        reviewBtn.addEventListener(\"click\", ()=>{\n            const reviewForm = document.querySelector(\".review-form\");\n            if (reviewForm) {\n                reviewForm.dataset.movieId = movie.id;\n                reviewForm.dataset.movieName = movie.name;\n                // Scroll to review form\n                reviewForm.scrollIntoView({\n                    behavior: \"smooth\"\n                });\n            }\n        });\n        return card;\n    }\n}\n// New Review Manager Class\nclass ReviewManager {\n    constructor(){\n        this.reviews = this.loadReviews();\n        this.reviewForm = document.querySelector(\".review-form\");\n        this.reviewsDisplay = document.getElementById(\"reviews-display\");\n        this.setupEventListeners();\n    }\n    loadReviews() {\n        try {\n            const reviews = localStorage.getItem(CONFIG.STORAGE_KEYS.REVIEWS);\n            return reviews ? JSON.parse(reviews) : {};\n        } catch (error) {\n            console.error(\"Error loading reviews:\", error);\n            return {};\n        }\n    }\n    setupEventListeners() {\n        if (!this.reviewForm) return;\n        this.reviewForm.addEventListener(\"submit\", (e)=>{\n            e.preventDefault();\n            const reviewText = document.getElementById(\"review-text\").value;\n            const rating = document.getElementById(\"rating\").value;\n            const movieId = this.reviewForm.dataset.movieId;\n            const movieName = this.reviewForm.dataset.movieName;\n            if (movieId && movieName) this.addReview(movieId, movieName, reviewText, rating);\n            else app.notificationManager.show(\"Please select a movie to review\", \"error\");\n        });\n    }\n    addReview(movieId, movieName, reviewText, rating) {\n        if (!movieId || !reviewText || !rating) return;\n        const review = {\n            movieId,\n            movieName,\n            reviewText,\n            rating: Number(rating),\n            date: new Date().toISOString()\n        };\n        if (!this.reviews[movieId]) this.reviews[movieId] = [];\n        this.reviews[movieId].push(review);\n        this.saveReviews();\n        this.displayReviews();\n        this.resetForm();\n        app.notificationManager.show(\"Review added successfully\", \"success\");\n    }\n    saveReviews() {\n        try {\n            localStorage.setItem(CONFIG.STORAGE_KEYS.REVIEWS, JSON.stringify(this.reviews));\n        } catch (error) {\n            console.error(\"Error saving reviews:\", error);\n        }\n    }\n    displayReviews() {\n        if (!this.reviewsDisplay) return;\n        this.reviewsDisplay.innerHTML = \"\";\n        let hasReviews = false;\n        Object.values(this.reviews).flat().sort((a, b)=>{\n            return new Date(b.date) - new Date(a.date);\n        }).forEach((review)=>{\n            hasReviews = true;\n            const reviewElement = this.createReviewElement(review);\n            this.reviewsDisplay.appendChild(reviewElement);\n        });\n        if (!hasReviews) this.reviewsDisplay.innerHTML = '<p class=\"text-center\">No reviews yet. Watch some movies and share your thoughts!</p>';\n    }\n    createReviewElement(review) {\n        const reviewDiv = document.createElement(\"div\");\n        reviewDiv.className = \"review-item mb-3 p-3 bg-white rounded shadow-sm\";\n        const stars = \"\\u2605\".repeat(review.rating) + \"\\u2606\".repeat(CONFIG.MAX_RATING - review.rating);\n        const date = new Date(review.date).toLocaleDateString();\n        reviewDiv.innerHTML = `\n            <div class=\"d-flex justify-content-between align-items-center mb-2\">\n                <h4 class=\"movie-title h5 mb-0\">${sanitizeString(review.movieName)}</h4>\n                <span class=\"text-warning\">${stars}</span>\n            </div>\n            <p class=\"review-text mb-2\">${sanitizeString(review.reviewText)}</p>\n            <div class=\"text-muted small\">\n                <em>Reviewed on ${date}</em>\n                <button class=\"btn btn-sm btn-outline-danger float-end delete-review\" \n                        data-movie-id=\"${review.movieId}\">\n                    <i class=\"fas fa-trash-alt\"></i> Delete\n                </button>\n            </div>\n        `;\n        reviewDiv.querySelector(\".delete-review\").addEventListener(\"click\", ()=>{\n            this.deleteReview(review.movieId, review.date);\n        });\n        return reviewDiv;\n    }\n    deleteReview(movieId, date) {\n        if (this.reviews[movieId]) {\n            this.reviews[movieId] = this.reviews[movieId].filter((r)=>r.date !== date);\n            if (this.reviews[movieId].length === 0) delete this.reviews[movieId];\n            this.saveReviews();\n            this.displayReviews();\n            app.notificationManager.show(\"Review deleted\", \"success\");\n        }\n    }\n    resetForm() {\n        if (this.reviewForm) {\n            this.reviewForm.reset();\n            delete this.reviewForm.dataset.movieId;\n            delete this.reviewForm.dataset.movieName;\n        }\n    }\n    getMovieRating(movieId) {\n        if (!this.reviews[movieId]) return null;\n        const ratings = this.reviews[movieId].map((r)=>r.rating);\n        const average = ratings.reduce((a, b)=>a + b, 0) / ratings.length;\n        return average.toFixed(1);\n    }\n    hasReviewedMovie(movieId) {\n        return !!this.reviews[movieId]?.length;\n    }\n}\n// Main App Class\nclass MovieApp {\n    constructor(){\n        this.initializeElements();\n        this.reviewManager = new ReviewManager(); // Initialize reviewManager first\n        this.movieListManager = new MovieListManager();\n        this.initializeEventListeners();\n        this.watchlistManager = new StorageManager(CONFIG.STORAGE_KEYS.WATCHLIST);\n        this.favoritesManager = new StorageManager(CONFIG.STORAGE_KEYS.FAVORITES);\n        this.carouselManager = new CarouselManager(this.reviewManager); // Pass reviewManager\n        this.notificationManager = new NotificationManager();\n    }\n    initializeElements() {\n        this.form = document.querySelector(\".search-form\");\n        this.gallery = document.querySelector(\".image-container\");\n        this.searchInput = this.form?.querySelector('input[type=\"search\"]');\n        this.loadingIndicator = document.querySelector(\".loading\");\n        this.movieListingsContainer = document.getElementById(\"movieListings\");\n        if (!this.form || !this.gallery || !this.searchInput) throw new Error(\"Required elements not found\");\n    }\n    initializeEventListeners() {\n        this.form.addEventListener(\"submit\", this.handleSearch.bind(this));\n        this.searchInput.addEventListener(\"input\", debounce((e)=>{\n            const isValid = e.target.checkValidity();\n            e.target.setAttribute(\"aria-invalid\", !isValid);\n        }, 300));\n        window.addEventListener(\"DOMContentLoaded\", ()=>{\n            this.watchlistManager.display();\n            this.favoritesManager.display();\n        });\n        window.addEventListener(\"online\", ()=>{\n            this.notificationManager.show(\"Connection restored\", \"success\");\n        });\n        window.addEventListener(\"offline\", ()=>{\n            this.notificationManager.show(\"No internet connection\", \"error\");\n        });\n    }\n    async handleSearch(e) {\n        e.preventDefault();\n        const query = sanitizeString(this.searchInput.value.trim());\n        if (!query) {\n            this.notificationManager.show(\"Please enter a search term\", \"error\");\n            return;\n        }\n        this.setLoading(true);\n        try {\n            const shows = await this.fetchShows(query);\n            await this.carouselManager.updateCarousel(shows, {\n                watchlistManager: this.watchlistManager,\n                favoritesManager: this.favoritesManager\n            });\n            this.movieListManager.updateMovieList(shows);\n            this.searchInput.value = \"\";\n        } catch (error) {\n            this.notificationManager.show(error.message, \"error\");\n            console.error(\"Search error:\", error);\n        } finally{\n            this.setLoading(false);\n        }\n    }\n    setLoading(isLoading) {\n        if (this.loadingIndicator) {\n            this.loadingIndicator.style.display = isLoading ? \"flex\" : \"none\";\n            this.loadingIndicator.setAttribute(\"aria-busy\", isLoading);\n        }\n    }\n    async fetchShows(query) {\n        const controller = new AbortController();\n        const timeoutId = setTimeout(()=>controller.abort(), 5000);\n        try {\n            const response = await fetch(`${CONFIG.API_BASE_URL}?q=${encodeURIComponent(query)}`, {\n                signal: controller.signal\n            });\n            clearTimeout(timeoutId);\n            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n            return await response.json();\n        } catch (error) {\n            if (error.name === \"AbortError\") throw new Error(\"Request timed out\");\n            throw new Error(`Failed to fetch shows: ${error.message}`);\n        }\n    }\n}\n// Notification Manager Class\nclass NotificationManager {\n    constructor(){\n        this.container = document.createElement(\"div\");\n        this.container.className = \"notification-container\";\n        this.container.setAttribute(\"role\", \"alert\");\n        this.container.setAttribute(\"aria-live\", \"polite\");\n        document.body.appendChild(this.container);\n    }\n    show(message, type = \"info\") {\n        const notification = document.createElement(\"div\");\n        notification.className = `notification notification-${type}`;\n        notification.textContent = message;\n        this.container.appendChild(notification);\n        setTimeout(()=>{\n            notification.classList.add(\"fade-out\");\n            setTimeout(()=>notification.remove(), 300);\n        }, CONFIG.NOTIFICATION_DURATION);\n    }\n}\n// Carousel Manager Class\nclass CarouselManager {\n    constructor(reviewManager){\n        this.carouselInner = document.querySelector(\"#topRatedCarousel .carousel-inner\");\n        this.initializeIntersectionObserver();\n        this.notificationManager = new NotificationManager();\n        this.reviewManager = reviewManager;\n    }\n    initializeIntersectionObserver() {\n        this.observer = new IntersectionObserver((entries)=>{\n            entries.forEach((entry)=>{\n                if (entry.isIntersecting) {\n                    const img = entry.target;\n                    if (img.dataset.src) {\n                        img.src = img.dataset.src;\n                        img.removeAttribute(\"data-src\");\n                        this.observer.unobserve(img);\n                    }\n                }\n            });\n        }, {\n            threshold: 0.1\n        });\n    }\n    async updateCarousel(shows, { watchlistManager, favoritesManager }) {\n        if (!this.carouselInner) return;\n        this.carouselInner.innerHTML = \"\";\n        const validShows = shows.filter((show)=>show.show.image?.original).slice(0, CONFIG.CAROUSEL_LIMIT);\n        validShows.forEach((show, index)=>{\n            this.createCarouselItem(show, index === 0, watchlistManager, favoritesManager);\n        });\n    }\n    createCarouselItem(show, isActive, watchlistManager, favoritesManager) {\n        const { id, name, image, rating } = show.show;\n        if (!name || !image?.original) {\n            console.error(\"Invalid show data:\", show);\n            return;\n        }\n        const sanitizedName = sanitizeString(name);\n        const sanitizedImage = sanitizeString(image.original);\n        // Use this.reviewManager instead of app.reviewManager\n        const userRating = this.reviewManager.getMovieRating(id);\n        const hasReview = this.reviewManager.hasReviewedMovie(id);\n        const carouselItem = document.createElement(\"div\");\n        carouselItem.classList.add(\"carousel-item\");\n        if (isActive) carouselItem.classList.add(\"active\");\n        carouselItem.innerHTML = `\n            <img data-src=\"${sanitizedImage}\" \n                 class=\"d-block w-100 carousel-image\" \n                 alt=\"${sanitizedName}\"\n                 src=\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 1 1'%3E%3C/svg%3E\"\n                 onerror=\"this.src='https://via.placeholder.com/1200x675?text=No+Image'\">\n            <div class=\"carousel-caption d-none d-md-block\">\n                <h5>${sanitizedName}</h5>\n                <p>TVDB Rating: ${rating?.average || \"N/A\"}</p>\n                ${userRating ? `<p class=\"user-rating\">Your Rating: ${userRating} \\u{2605}</p>` : \"\"}\n                <div class=\"button-group\">\n                    <button class=\"btn btn-primary watchlist-btn\" aria-label=\"Add ${sanitizedName} to Watchlist\">\n                        <i class=\"fas fa-list me-2\" aria-hidden=\"true\"></i>Add to Watchlist\n                    </button>\n                    <button class=\"btn btn-success favorite-btn\" aria-label=\"Add ${sanitizedName} to Favorites\">\n                        <i class=\"fas fa-heart me-2\" aria-hidden=\"true\"></i>Add to Favorites\n                    </button>\n                    <button class=\"btn btn-info review-btn\" \n                            aria-label=\"${hasReview ? \"Update\" : \"Add\"} review for ${sanitizedName}\">\n                        <i class=\"fas fa-star me-2\" aria-hidden=\"true\"></i>\n                        ${hasReview ? \"Update Review\" : \"Add Review\"}\n                    </button>\n                </div>\n            </div>\n        `;\n        const watchlistBtn = carouselItem.querySelector(\".watchlist-btn\");\n        const favoriteBtn = carouselItem.querySelector(\".favorite-btn\");\n        const reviewBtn = carouselItem.querySelector(\".review-btn\");\n        watchlistBtn.addEventListener(\"click\", ()=>{\n            watchlistManager.add(name, image.original);\n            this.notificationManager.show(\"Added to watchlist\", \"success\");\n        });\n        favoriteBtn.addEventListener(\"click\", ()=>{\n            favoritesManager.add(name, image.original);\n            this.notificationManager.show(\"Added to favorites\", \"success\");\n        });\n        reviewBtn.addEventListener(\"click\", ()=>{\n            const reviewForm = document.querySelector(\".review-form\");\n            if (reviewForm) {\n                reviewForm.dataset.movieId = id;\n                reviewForm.dataset.movieName = name;\n            }\n        });\n        const img = carouselItem.querySelector(\"img\");\n        if (CONFIG.IMAGE_LAZY_LOADING && this.observer) this.observer.observe(img);\n        this.carouselInner.appendChild(carouselItem);\n    }\n}\n// Storage Manager Class\nclass StorageManager {\n    constructor(storageKey){\n        this.storageKey = storageKey;\n        this.items = this.loadFromStorage();\n        this.displayElement = document.getElementById(`${storageKey}-movies`);\n        // Add event delegation for remove buttons\n        this.displayElement?.addEventListener(\"click\", (e)=>{\n            if (e.target.closest(\".remove-btn\")) {\n                const name = e.target.closest(\".remove-btn\").dataset.name;\n                this.remove(name);\n            }\n        });\n    }\n    loadFromStorage() {\n        try {\n            const data = localStorage.getItem(this.storageKey);\n            return data ? JSON.parse(data) : [];\n        } catch (error) {\n            console.error(`Error loading ${this.storageKey}:`, error);\n            return [];\n        }\n    }\n    add(name, image) {\n        if (!name || !image) {\n            console.error(\"Invalid movie data:\", {\n                name,\n                image\n            });\n            return;\n        }\n        if (!this.items.some((item)=>item.name === name)) {\n            if (this.storageKey === CONFIG.STORAGE_KEYS.FAVORITES && this.items.length >= CONFIG.FAVORITES_LIMIT) this.items.shift();\n            this.items.push({\n                name,\n                image\n            });\n            this.saveToStorage();\n            this.display();\n        }\n    }\n    remove(name) {\n        if (!name) return;\n        console.log(`Removing ${name} from ${this.storageKey}`); // Debug log\n        this.items = this.items.filter((item)=>item.name !== name);\n        this.saveToStorage();\n        this.display();\n    }\n    saveToStorage() {\n        try {\n            localStorage.setItem(this.storageKey, JSON.stringify(this.items));\n            console.log(`Saved ${this.storageKey}:`, this.items); // Debug log\n        } catch (error) {\n            console.error(`Error saving ${this.storageKey}:`, error);\n        }\n    }\n    display() {\n        if (!this.displayElement) {\n            console.error(`Display element for ${this.storageKey} not found`);\n            return;\n        }\n        if (!this.items.length) {\n            this.displayElement.innerHTML = `\n                <p class=\"text-center\">No items in your ${this.storageKey}.</p>\n            `;\n            return;\n        }\n        this.displayGrid();\n    }\n    displayGrid() {\n        this.displayElement.innerHTML = \"\";\n        const container = document.createElement(\"div\");\n        container.classList.add(`${this.storageKey}-grid`);\n        const itemsToDisplay = this.storageKey === CONFIG.STORAGE_KEYS.FAVORITES ? this.items.slice(-CONFIG.FAVORITES_LIMIT) : this.items;\n        itemsToDisplay.forEach((item, index)=>{\n            if (item && item.name && item.image) {\n                const card = this.createMovieCard(item, index);\n                container.appendChild(card);\n            }\n        });\n        this.displayElement.appendChild(container);\n    }\n    createMovieCard(item, index) {\n        const sanitizedName = sanitizeString(item.name);\n        const sanitizedImage = sanitizeString(item.image);\n        const card = document.createElement(\"div\");\n        card.classList.add(\"movie-card\");\n        card.innerHTML = `\n            <div class=\"movie-card-inner\">\n                <img src=\"${sanitizedImage}\" \n                     alt=\"${sanitizedName}\" \n                     class=\"movie-image\"\n                     loading=\"lazy\"\n                     onerror=\"this.src='https://via.placeholder.com/300x450?text=No+Image'\">\n                <div class=\"movie-info\">\n                    <h3 class=\"movie-title\">${sanitizedName}</h3>\n                    <button class=\"btn btn-danger remove-btn\" \n                            data-name=\"${sanitizedName}\"\n                            aria-label=\"Remove ${sanitizedName}\">\n                        <i class=\"fas fa-trash-alt me-2\" aria-hidden=\"true\"></i>Remove\n                    </button>\n                </div>\n            </div>\n        `;\n        return card;\n    }\n    clear() {\n        this.items = [];\n        this.saveToStorage();\n        this.display();\n    }\n}\n// Initialize the app\ntry {\n    window.app = new MovieApp();\n} catch (error) {\n    console.error(\"Failed to initialize application:\", error);\n    const errorMessage = document.createElement(\"div\");\n    errorMessage.className = \"alert alert-danger m-3\";\n    errorMessage.setAttribute(\"role\", \"alert\");\n    errorMessage.textContent = \"Failed to initialize application. Please refresh the page.\";\n    document.body.prepend(errorMessage);\n}\n// Debug function to clear storage\nwindow.clearStorage = ()=>{\n    app.watchlistManager.clear();\n    app.favoritesManager.clear();\n    // Add this line to clear reviews too\n    localStorage.removeItem(CONFIG.STORAGE_KEYS.REVIEWS);\n    console.log(\"Storage cleared\");\n};\n\n//# sourceMappingURL=index.c6bf83b2.js.map\n","// Constants and Configuration\nconst CONFIG = {\n    API_BASE_URL: 'https://api.tvmaze.com/search/shows',\n    CAROUSEL_LIMIT: 5,\n    FAVORITES_LIMIT: 4,\n    NOTIFICATION_DURATION: 3000,\n    IMAGE_LAZY_LOADING: true,\n    STORAGE_KEYS: {\n        WATCHLIST: 'reelrate_watchlist',\n        FAVORITES: 'reelrate_favorites',\n        REVIEWS: 'reelrate_reviews',\n        MOVIE_LIST: 'reelrate_movie_list'\n    },\n       MAX_RATING: 5\n};\n\n// Utility Functions\nconst debounce = (func, wait) => {\n    let timeout;\n    return function executedFunction(...args) {\n        const later = () => {\n            clearTimeout(timeout);\n            func(...args);\n        };\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n    };\n};\n\nconst sanitizeString = (str) => {\n    const div = document.createElement('div');\n    div.textContent = str;\n    return div.innerHTML.replace(/\"/g, '&quot;');\n};\n\nclass MovieListManager {\n    constructor() {\n        this.movieListingsContainer = document.getElementById('movieListings');\n        this.movies = this.loadMovies();\n    }\n\n    loadMovies() {\n        try {\n            const movies = localStorage.getItem(CONFIG.STORAGE_KEYS.MOVIE_LIST);\n            return movies ? JSON.parse(movies) : [];\n        } catch (error) {\n            console.error('Error loading movies:', error);\n            return [];\n        }\n    }\n\n    saveMovies() {\n        try {\n            localStorage.setItem(CONFIG.STORAGE_KEYS.MOVIE_LIST, JSON.stringify(this.movies));\n        } catch (error) {\n            console.error('Error saving movies:', error);\n        }\n    }\n\n    updateMovieList(shows) {\n        if (!shows || !Array.isArray(shows)) return;\n\n        this.movies = shows.map(show => ({\n            id: show.show.id,\n            name: show.show.name,\n            image: show.show.image?.original || null,\n            rating: show.show.rating?.average || 'N/A'\n        }));\n\n        this.saveMovies();\n        this.display();\n    }\n\n    display() {\n        if (!this.movieListingsContainer) {\n            console.error('Movie listings container not found');\n            return;\n        }\n\n        this.movieListingsContainer.innerHTML = '';\n\n        if (!this.movies.length) {\n            this.movieListingsContainer.innerHTML = '<p class=\"text-center text-light\">No results found.</p>';\n            return;\n        }\n\n        const grid = document.createElement('div');\n        grid.className = 'movie-listings-grid';\n\n        this.movies.forEach(movie => {\n            const card = this.createMovieCard(movie);\n            grid.appendChild(card);\n        });\n\n        this.movieListingsContainer.appendChild(grid);\n    }\n\n    createMovieCard(movie) {\n        const card = document.createElement('div');\n        card.className = 'movie-card';\n\n        card.innerHTML = `\n            <div class=\"movie-card-inner\">\n                <img src=\"${movie.image || 'https://via.placeholder.com/300x450?text=No+Image'}\" \n                     alt=\"${sanitizeString(movie.name)}\" \n                     class=\"movie-image\"\n                     loading=\"lazy\" \n                     onerror=\"this.src='https://via.placeholder.com/300x450?text=No+Image'\">\n                <div class=\"movie-info\">\n                    <h3 class=\"movie-title\">${sanitizeString(movie.name)}</h3>\n                    <p class=\"movie-rating\">Rating: ${movie.rating}</p>\n                    <button class=\"btn btn-info review-btn\" \n                            data-movie-id=\"${movie.id}\"\n                            data-movie-name=\"${sanitizeString(movie.name)}\"\n                            aria-label=\"Review ${sanitizeString(movie.name)}\">\n                        <i class=\"fas fa-star me-2\"></i>Review\n                    </button>\n                </div>\n            </div>\n        `;\n\n        // Add event listener for review button\n        const reviewBtn = card.querySelector('.review-btn');\n        reviewBtn.addEventListener('click', () => {\n            const reviewForm = document.querySelector('.review-form');\n            if (reviewForm) {\n                reviewForm.dataset.movieId = movie.id;\n                reviewForm.dataset.movieName = movie.name;\n                // Scroll to review form\n                reviewForm.scrollIntoView({ behavior: 'smooth' });\n            }\n        });\n\n        return card;\n    }\n} \n// New Review Manager Class\nclass ReviewManager {\n    constructor() {\n        this.reviews = this.loadReviews();\n        this.reviewForm = document.querySelector('.review-form');\n        this.reviewsDisplay = document.getElementById('reviews-display');\n        this.setupEventListeners();\n    }\n\n    loadReviews() {\n        try {\n            const reviews = localStorage.getItem(CONFIG.STORAGE_KEYS.REVIEWS);\n            return reviews ? JSON.parse(reviews) : {};\n        } catch (error) {\n            console.error('Error loading reviews:', error);\n            return {};\n        }\n    }\n\n    setupEventListeners() {\n        if (!this.reviewForm) return;\n\n        this.reviewForm.addEventListener('submit', (e) => {\n            e.preventDefault();\n            const reviewText = document.getElementById('review-text').value;\n            const rating = document.getElementById('rating').value;\n            const movieId = this.reviewForm.dataset.movieId;\n            const movieName = this.reviewForm.dataset.movieName;\n\n            if (movieId && movieName) {\n                this.addReview(movieId, movieName, reviewText, rating);\n            } else {\n                app.notificationManager.show('Please select a movie to review', 'error');\n            }\n        });\n    }\n\n    addReview(movieId, movieName, reviewText, rating) {\n        if (!movieId || !reviewText || !rating) return;\n\n        const review = {\n            movieId,\n            movieName,\n            reviewText,\n            rating: Number(rating),\n            date: new Date().toISOString()\n        };\n\n        if (!this.reviews[movieId]) {\n            this.reviews[movieId] = [];\n        }\n        this.reviews[movieId].push(review);\n        this.saveReviews();\n        this.displayReviews();\n        this.resetForm();\n        app.notificationManager.show('Review added successfully', 'success');\n    }\n\n    saveReviews() {\n        try {\n            localStorage.setItem(CONFIG.STORAGE_KEYS.REVIEWS, JSON.stringify(this.reviews));\n        } catch (error) {\n            console.error('Error saving reviews:', error);\n        }\n    }\n\n    displayReviews() {\n        if (!this.reviewsDisplay) return;\n\n        this.reviewsDisplay.innerHTML = '';\n        let hasReviews = false;\n\n        Object.values(this.reviews).flat().sort((a, b) => {\n            return new Date(b.date) - new Date(a.date);\n        }).forEach(review => {\n            hasReviews = true;\n            const reviewElement = this.createReviewElement(review);\n            this.reviewsDisplay.appendChild(reviewElement);\n        });\n\n        if (!hasReviews) {\n            this.reviewsDisplay.innerHTML = '<p class=\"text-center\">No reviews yet. Watch some movies and share your thoughts!</p>';\n        }\n    }\n\n    createReviewElement(review) {\n        const reviewDiv = document.createElement('div');\n        reviewDiv.className = 'review-item mb-3 p-3 bg-white rounded shadow-sm';\n        \n        const stars = '★'.repeat(review.rating) + '☆'.repeat(CONFIG.MAX_RATING - review.rating);\n        const date = new Date(review.date).toLocaleDateString();\n\n        reviewDiv.innerHTML = `\n            <div class=\"d-flex justify-content-between align-items-center mb-2\">\n                <h4 class=\"movie-title h5 mb-0\">${sanitizeString(review.movieName)}</h4>\n                <span class=\"text-warning\">${stars}</span>\n            </div>\n            <p class=\"review-text mb-2\">${sanitizeString(review.reviewText)}</p>\n            <div class=\"text-muted small\">\n                <em>Reviewed on ${date}</em>\n                <button class=\"btn btn-sm btn-outline-danger float-end delete-review\" \n                        data-movie-id=\"${review.movieId}\">\n                    <i class=\"fas fa-trash-alt\"></i> Delete\n                </button>\n            </div>\n        `;\n\n        reviewDiv.querySelector('.delete-review').addEventListener('click', () => {\n            this.deleteReview(review.movieId, review.date);\n        });\n\n        return reviewDiv;\n    }\n\n    deleteReview(movieId, date) {\n        if (this.reviews[movieId]) {\n            this.reviews[movieId] = this.reviews[movieId].filter(r => r.date !== date);\n            if (this.reviews[movieId].length === 0) {\n                delete this.reviews[movieId];\n            }\n            this.saveReviews();\n            this.displayReviews();\n            app.notificationManager.show('Review deleted', 'success');\n        }\n    }\n\n    resetForm() {\n        if (this.reviewForm) {\n            this.reviewForm.reset();\n            delete this.reviewForm.dataset.movieId;\n            delete this.reviewForm.dataset.movieName;\n        }\n    }\n\n    getMovieRating(movieId) {\n        if (!this.reviews[movieId]) return null;\n        const ratings = this.reviews[movieId].map(r => r.rating);\n        const average = ratings.reduce((a, b) => a + b, 0) / ratings.length;\n        return average.toFixed(1);\n    }\n\n    hasReviewedMovie(movieId) {\n        return !!this.reviews[movieId]?.length;\n    }\n}\n// Main App Class\nclass MovieApp {\n    constructor() {\n        this.initializeElements();\n        this.reviewManager = new ReviewManager(); // Initialize reviewManager first\n         this.movieListManager = new MovieListManager();\n        this.initializeEventListeners();\n        this.watchlistManager = new StorageManager(CONFIG.STORAGE_KEYS.WATCHLIST);\n        this.favoritesManager = new StorageManager(CONFIG.STORAGE_KEYS.FAVORITES);\n        this.carouselManager = new CarouselManager(this.reviewManager); // Pass reviewManager\n        this.notificationManager = new NotificationManager();\n    }\n\n    initializeElements() {\n        this.form = document.querySelector('.search-form');\n        this.gallery = document.querySelector('.image-container');\n        this.searchInput = this.form?.querySelector('input[type=\"search\"]');\n        this.loadingIndicator = document.querySelector('.loading');\n        this.movieListingsContainer = document.getElementById('movieListings');\n\n        if (!this.form || !this.gallery || !this.searchInput) {\n            throw new Error('Required elements not found');\n        }\n    }\n\n    initializeEventListeners() {\n        this.form.addEventListener('submit', this.handleSearch.bind(this));\n        \n        this.searchInput.addEventListener('input', debounce((e) => {\n            const isValid = e.target.checkValidity();\n            e.target.setAttribute('aria-invalid', !isValid);\n        }, 300));\n\n        window.addEventListener('DOMContentLoaded', () => {\n            this.watchlistManager.display();\n            this.favoritesManager.display();\n        });\n\n        window.addEventListener('online', () => {\n            this.notificationManager.show('Connection restored', 'success');\n        });\n        \n        window.addEventListener('offline', () => {\n            this.notificationManager.show('No internet connection', 'error');\n        });\n    }\n\n    async handleSearch(e) {\n        e.preventDefault();\n        const query = sanitizeString(this.searchInput.value.trim());\n        \n        if (!query) {\n            this.notificationManager.show('Please enter a search term', 'error');\n            return;\n        }\n\n        this.setLoading(true);\n\n        try {\n            const shows = await this.fetchShows(query);\n            await this.carouselManager.updateCarousel(shows, {\n                watchlistManager: this.watchlistManager,\n                favoritesManager: this.favoritesManager\n            });\n            this.movieListManager.updateMovieList(shows);\n            this.searchInput.value = '';\n        } catch (error) {\n            this.notificationManager.show(error.message, 'error');\n            console.error('Search error:', error);\n        } finally {\n            this.setLoading(false);\n        }\n    }\n\n    setLoading(isLoading) {\n        if (this.loadingIndicator) {\n            this.loadingIndicator.style.display = isLoading ? 'flex' : 'none';\n            this.loadingIndicator.setAttribute('aria-busy', isLoading);\n        }\n    }\n\n    async fetchShows(query) {\n        const controller = new AbortController();\n        const timeoutId = setTimeout(() => controller.abort(), 5000);\n\n        try {\n            const response = await fetch(\n                `${CONFIG.API_BASE_URL}?q=${encodeURIComponent(query)}`,\n                { signal: controller.signal }\n            );\n\n            clearTimeout(timeoutId);\n\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n\n            return await response.json();\n        } catch (error) {\n            if (error.name === 'AbortError') {\n                throw new Error('Request timed out');\n            }\n            throw new Error(`Failed to fetch shows: ${error.message}`);\n        }\n    }\n}\n\n// Notification Manager Class\nclass NotificationManager {\n    constructor() {\n        this.container = document.createElement('div');\n        this.container.className = 'notification-container';\n        this.container.setAttribute('role', 'alert');\n        this.container.setAttribute('aria-live', 'polite');\n        document.body.appendChild(this.container);\n    }\n\n    show(message, type = 'info') {\n        const notification = document.createElement('div');\n        notification.className = `notification notification-${type}`;\n        notification.textContent = message;\n        \n        this.container.appendChild(notification);\n        \n        setTimeout(() => {\n            notification.classList.add('fade-out');\n            setTimeout(() => notification.remove(), 300);\n        }, CONFIG.NOTIFICATION_DURATION);\n    }\n}\n\n// Carousel Manager Class\nclass CarouselManager {\n    constructor(reviewManager) {  // Add reviewManager parameter\n        this.carouselInner = document.querySelector('#topRatedCarousel .carousel-inner');\n        this.initializeIntersectionObserver();\n        this.notificationManager = new NotificationManager();\n        this.reviewManager = reviewManager; \n    }  \n\n    initializeIntersectionObserver() {\n        this.observer = new IntersectionObserver(\n            (entries) => {\n                entries.forEach(entry => {\n                    if (entry.isIntersecting) {\n                        const img = entry.target;\n                        if (img.dataset.src) {\n                            img.src = img.dataset.src;\n                            img.removeAttribute('data-src');\n                            this.observer.unobserve(img);\n                        }\n                    }\n                });\n            },\n            { threshold: 0.1 }\n        );\n    }\n\n    async updateCarousel(shows, { watchlistManager, favoritesManager }) {\n        if (!this.carouselInner) return;\n\n        this.carouselInner.innerHTML = '';\n        \n        const validShows = shows\n            .filter(show => show.show.image?.original)\n            .slice(0, CONFIG.CAROUSEL_LIMIT);\n\n        validShows.forEach((show, index) => {\n            this.createCarouselItem(show, index === 0, watchlistManager, favoritesManager);\n        });\n    }\n\n    createCarouselItem(show, isActive, watchlistManager, favoritesManager) {\n        const { id, name, image, rating } = show.show;\n        \n        if (!name || !image?.original) {\n            console.error('Invalid show data:', show);\n            return;\n        }\n\n        const sanitizedName = sanitizeString(name);\n        const sanitizedImage = sanitizeString(image.original);\n        // Use this.reviewManager instead of app.reviewManager\n        const userRating = this.reviewManager.getMovieRating(id);\n        const hasReview = this.reviewManager.hasReviewedMovie(id);\n\n        const carouselItem = document.createElement('div');\n        carouselItem.classList.add('carousel-item');\n        if (isActive) carouselItem.classList.add('active');\n\n        carouselItem.innerHTML = `\n            <img data-src=\"${sanitizedImage}\" \n                 class=\"d-block w-100 carousel-image\" \n                 alt=\"${sanitizedName}\"\n                 src=\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 1 1'%3E%3C/svg%3E\"\n                 onerror=\"this.src='https://via.placeholder.com/1200x675?text=No+Image'\">\n            <div class=\"carousel-caption d-none d-md-block\">\n                <h5>${sanitizedName}</h5>\n                <p>TVDB Rating: ${rating?.average || 'N/A'}</p>\n                ${userRating ? `<p class=\"user-rating\">Your Rating: ${userRating} ★</p>` : ''}\n                <div class=\"button-group\">\n                    <button class=\"btn btn-primary watchlist-btn\" aria-label=\"Add ${sanitizedName} to Watchlist\">\n                        <i class=\"fas fa-list me-2\" aria-hidden=\"true\"></i>Add to Watchlist\n                    </button>\n                    <button class=\"btn btn-success favorite-btn\" aria-label=\"Add ${sanitizedName} to Favorites\">\n                        <i class=\"fas fa-heart me-2\" aria-hidden=\"true\"></i>Add to Favorites\n                    </button>\n                    <button class=\"btn btn-info review-btn\" \n                            aria-label=\"${hasReview ? 'Update' : 'Add'} review for ${sanitizedName}\">\n                        <i class=\"fas fa-star me-2\" aria-hidden=\"true\"></i>\n                        ${hasReview ? 'Update Review' : 'Add Review'}\n                    </button>\n                </div>\n            </div>\n        `;\n\n        const watchlistBtn = carouselItem.querySelector('.watchlist-btn');\n        const favoriteBtn = carouselItem.querySelector('.favorite-btn');\n        const reviewBtn = carouselItem.querySelector('.review-btn');\n\n        watchlistBtn.addEventListener('click', () => {\n            watchlistManager.add(name, image.original);\n            this.notificationManager.show('Added to watchlist', 'success');\n        });\n\n        favoriteBtn.addEventListener('click', () => {\n            favoritesManager.add(name, image.original);\n            this.notificationManager.show('Added to favorites', 'success');\n        });\n\n        reviewBtn.addEventListener('click', () => {\n            const reviewForm = document.querySelector('.review-form');\n            if (reviewForm) {\n                reviewForm.dataset.movieId = id;\n                reviewForm.dataset.movieName = name;\n            }\n        });\n\n        const img = carouselItem.querySelector('img');\n        if (CONFIG.IMAGE_LAZY_LOADING && this.observer) {\n            this.observer.observe(img);\n        }\n\n        this.carouselInner.appendChild(carouselItem);\n    }\n}\n\n// Storage Manager Class\nclass StorageManager {\n    constructor(storageKey) {\n        this.storageKey = storageKey;\n        this.items = this.loadFromStorage();\n        this.displayElement = document.getElementById(`${storageKey}-movies`);\n        // Add event delegation for remove buttons\n        this.displayElement?.addEventListener('click', (e) => {\n            if (e.target.closest('.remove-btn')) {\n                const name = e.target.closest('.remove-btn').dataset.name;\n                this.remove(name);\n            }\n        });\n    }\n\n    loadFromStorage() {\n        try {\n            const data = localStorage.getItem(this.storageKey);\n            return data ? JSON.parse(data) : [];\n        } catch (error) {\n            console.error(`Error loading ${this.storageKey}:`, error);\n            return [];\n        }\n    }\n\n    add(name, image) {\n        if (!name || !image) {\n            console.error('Invalid movie data:', { name, image });\n            return;\n        }\n\n        if (!this.items.some(item => item.name === name)) {\n            if (this.storageKey === CONFIG.STORAGE_KEYS.FAVORITES && \n                this.items.length >= CONFIG.FAVORITES_LIMIT) {\n                this.items.shift();\n            }\n            this.items.push({ name, image });\n            this.saveToStorage();\n            this.display();\n        }\n    }\n\n    remove(name) {\n        if (!name) return;\n        \n        console.log(`Removing ${name} from ${this.storageKey}`); // Debug log\n        this.items = this.items.filter(item => item.name !== name);\n        this.saveToStorage();\n        this.display();\n    }\n\n    saveToStorage() {\n        try {\n            localStorage.setItem(this.storageKey, JSON.stringify(this.items));\n            console.log(`Saved ${this.storageKey}:`, this.items); // Debug log\n        } catch (error) {\n            console.error(`Error saving ${this.storageKey}:`, error);\n        }\n    }\n\n    display() {\n        if (!this.displayElement) {\n            console.error(`Display element for ${this.storageKey} not found`);\n            return;\n        }\n\n        if (!this.items.length) {\n            this.displayElement.innerHTML = `\n                <p class=\"text-center\">No items in your ${this.storageKey}.</p>\n            `;\n            return;\n        }\n\n        this.displayGrid();\n    }\n\n    displayGrid() {\n        this.displayElement.innerHTML = '';\n        const container = document.createElement('div');\n        container.classList.add(`${this.storageKey}-grid`);\n\n        const itemsToDisplay = this.storageKey === CONFIG.STORAGE_KEYS.FAVORITES\n            ? this.items.slice(-CONFIG.FAVORITES_LIMIT)\n            : this.items;\n\n        itemsToDisplay.forEach((item, index) => {\n            if (item && item.name && item.image) { // Only create cards for valid items\n                const card = this.createMovieCard(item, index);\n                container.appendChild(card);\n            }\n        });\n\n        this.displayElement.appendChild(container);\n    }\n\n    createMovieCard(item, index) {\n        const sanitizedName = sanitizeString(item.name);\n        const sanitizedImage = sanitizeString(item.image);\n\n        const card = document.createElement('div');\n        card.classList.add('movie-card');\n        card.innerHTML = `\n            <div class=\"movie-card-inner\">\n                <img src=\"${sanitizedImage}\" \n                     alt=\"${sanitizedName}\" \n                     class=\"movie-image\"\n                     loading=\"lazy\"\n                     onerror=\"this.src='https://via.placeholder.com/300x450?text=No+Image'\">\n                <div class=\"movie-info\">\n                    <h3 class=\"movie-title\">${sanitizedName}</h3>\n                    <button class=\"btn btn-danger remove-btn\" \n                            data-name=\"${sanitizedName}\"\n                            aria-label=\"Remove ${sanitizedName}\">\n                        <i class=\"fas fa-trash-alt me-2\" aria-hidden=\"true\"></i>Remove\n                    </button>\n                </div>\n            </div>\n        `;\n\n        return card;\n    }\n\n    clear() {\n        this.items = [];\n        this.saveToStorage();\n        this.display();\n    }\n}\n\n// Initialize the app\ntry {\n    window.app = new MovieApp();\n} catch (error) {\n    console.error('Failed to initialize application:', error);\n    const errorMessage = document.createElement('div');\n    errorMessage.className = 'alert alert-danger m-3';\n    errorMessage.setAttribute('role', 'alert');\n    errorMessage.textContent = 'Failed to initialize application. Please refresh the page.';\n    document.body.prepend(errorMessage);\n}\n\n// Debug function to clear storage\nwindow.clearStorage = () => {\n    app.watchlistManager.clear();\n    app.favoritesManager.clear();\n    // Add this line to clear reviews too\n    localStorage.removeItem(CONFIG.STORAGE_KEYS.REVIEWS);\n    console.log('Storage cleared');\n};"],"names":["CONFIG","API_BASE_URL","CAROUSEL_LIMIT","FAVORITES_LIMIT","NOTIFICATION_DURATION","IMAGE_LAZY_LOADING","STORAGE_KEYS","WATCHLIST","FAVORITES","REVIEWS","MOVIE_LIST","MAX_RATING","debounce","func","wait","timeout","args","clearTimeout","setTimeout","sanitizeString","str","div","document","createElement","textContent","innerHTML","replace","MovieListManager","constructor","movieListingsContainer","getElementById","movies","loadMovies","localStorage","getItem","JSON","parse","error","console","saveMovies","setItem","stringify","updateMovieList","shows","Array","isArray","map","show","id","name","image","original","rating","average","display","length","grid","className","forEach","movie","card","createMovieCard","appendChild","reviewBtn","querySelector","addEventListener","reviewForm","dataset","movieId","movieName","scrollIntoView","behavior","ReviewManager","reviews","loadReviews","reviewsDisplay","setupEventListeners","e","preventDefault","reviewText","value","addReview","app","notificationManager","review","Number","date","Date","toISOString","push","saveReviews","displayReviews","resetForm","hasReviews","Object","values","flat","sort","a","b","reviewElement","createReviewElement","reviewDiv","stars","repeat","toLocaleDateString","deleteReview","filter","r","reset","getMovieRating","ratings","reduce","toFixed","hasReviewedMovie","NotificationManager","container","setAttribute","body","message","type","notification","classList","add","remove","CarouselManager","reviewManager","carouselInner","initializeIntersectionObserver","observer","IntersectionObserver","entries","entry","isIntersecting","img","target","src","removeAttribute","unobserve","threshold","updateCarousel","watchlistManager","favoritesManager","validShows","slice","index","createCarouselItem","isActive","sanitizedName","sanitizedImage","userRating","hasReview","carouselItem","watchlistBtn","favoriteBtn","observe","StorageManager","storageKey","items","loadFromStorage","displayElement","closest","data","some","item","shift","saveToStorage","log","displayGrid","itemsToDisplay","clear","window","initializeElements","movieListManager","initializeEventListeners","carouselManager","form","gallery","searchInput","loadingIndicator","Error","handleSearch","bind","isValid","checkValidity","query","trim","setLoading","fetchShows","isLoading","style","controller","AbortController","timeoutId","abort","response","fetch","encodeURIComponent","signal","ok","status","json","errorMessage","prepend","clearStorage","removeItem"],"version":3,"file":"index.c6bf83b2.js.map"}